// Code generated by go-swagger; DO NOT EDIT.

package liquidation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/frankrap/bitmexwrap/bitmex/models"
)

// LiquidationGetReader is a Reader for the LiquidationGet structure.
type LiquidationGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LiquidationGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewLiquidationGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewLiquidationGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewLiquidationGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewLiquidationGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewLiquidationGetOK creates a LiquidationGetOK with default headers values
func NewLiquidationGetOK() *LiquidationGetOK {
	return &LiquidationGetOK{}
}

/*LiquidationGetOK handles this case with default header values.

Request was successful
*/
type LiquidationGetOK struct {
	Payload []*models.Liquidation
}

func (o *LiquidationGetOK) Error() string {
	return fmt.Sprintf("[GET /liquidation][%d] liquidationGetOK  %+v", 200, o.Payload)
}

func (o *LiquidationGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLiquidationGetBadRequest creates a LiquidationGetBadRequest with default headers values
func NewLiquidationGetBadRequest() *LiquidationGetBadRequest {
	return &LiquidationGetBadRequest{}
}

/*LiquidationGetBadRequest handles this case with default header values.

Parameter Error
*/
type LiquidationGetBadRequest struct {
	Payload *models.Error
}

func (o *LiquidationGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /liquidation][%d] liquidationGetBadRequest  %+v", 400, *o.Payload)
}

func (o *LiquidationGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLiquidationGetUnauthorized creates a LiquidationGetUnauthorized with default headers values
func NewLiquidationGetUnauthorized() *LiquidationGetUnauthorized {
	return &LiquidationGetUnauthorized{}
}

/*LiquidationGetUnauthorized handles this case with default header values.

Unauthorized
*/
type LiquidationGetUnauthorized struct {
	Payload *models.Error
}

func (o *LiquidationGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /liquidation][%d] liquidationGetUnauthorized  %+v", 401, o.Payload)
}

func (o *LiquidationGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLiquidationGetNotFound creates a LiquidationGetNotFound with default headers values
func NewLiquidationGetNotFound() *LiquidationGetNotFound {
	return &LiquidationGetNotFound{}
}

/*LiquidationGetNotFound handles this case with default header values.

Not Found
*/
type LiquidationGetNotFound struct {
	Payload *models.Error
}

func (o *LiquidationGetNotFound) Error() string {
	return fmt.Sprintf("[GET /liquidation][%d] liquidationGetNotFound  %+v", 404, o.Payload)
}

func (o *LiquidationGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
