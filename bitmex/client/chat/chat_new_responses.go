// Code generated by go-swagger; DO NOT EDIT.

package chat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/frankrap/bitmexwrap/bitmex/models"
)

// ChatNewReader is a Reader for the ChatNew structure.
type ChatNewReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChatNewReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewChatNewOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewChatNewBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewChatNewUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewChatNewNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewChatNewOK creates a ChatNewOK with default headers values
func NewChatNewOK() *ChatNewOK {
	return &ChatNewOK{}
}

/*ChatNewOK handles this case with default header values.

Request was successful
*/
type ChatNewOK struct {
	Payload *models.Chat
}

func (o *ChatNewOK) Error() string {
	return fmt.Sprintf("[POST /chat][%d] chatNewOK  %+v", 200, *o.Payload)
}

func (o *ChatNewOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Chat)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChatNewBadRequest creates a ChatNewBadRequest with default headers values
func NewChatNewBadRequest() *ChatNewBadRequest {
	return &ChatNewBadRequest{}
}

/*ChatNewBadRequest handles this case with default header values.

Parameter Error
*/
type ChatNewBadRequest struct {
	Payload *models.Error
}

func (o *ChatNewBadRequest) Error() string {
	return fmt.Sprintf("[POST /chat][%d] chatNewBadRequest  %+v", 400, *o.Payload)
}

func (o *ChatNewBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChatNewUnauthorized creates a ChatNewUnauthorized with default headers values
func NewChatNewUnauthorized() *ChatNewUnauthorized {
	return &ChatNewUnauthorized{}
}

/*ChatNewUnauthorized handles this case with default header values.

Unauthorized
*/
type ChatNewUnauthorized struct {
	Payload *models.Error
}

func (o *ChatNewUnauthorized) Error() string {
	return fmt.Sprintf("[POST /chat][%d] chatNewUnauthorized  %+v", 401, o.Payload)
}

func (o *ChatNewUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChatNewNotFound creates a ChatNewNotFound with default headers values
func NewChatNewNotFound() *ChatNewNotFound {
	return &ChatNewNotFound{}
}

/*ChatNewNotFound handles this case with default header values.

Not Found
*/
type ChatNewNotFound struct {
	Payload *models.Error
}

func (o *ChatNewNotFound) Error() string {
	return fmt.Sprintf("[POST /chat][%d] chatNewNotFound  %+v", 404, o.Payload)
}

func (o *ChatNewNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
