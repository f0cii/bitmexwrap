// Code generated by go-swagger; DO NOT EDIT.

package chat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/frankrap/bitmexwrap/bitmex/models"
)

// ChatGetReader is a Reader for the ChatGet structure.
type ChatGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChatGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewChatGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewChatGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewChatGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewChatGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewChatGetOK creates a ChatGetOK with default headers values
func NewChatGetOK() *ChatGetOK {
	return &ChatGetOK{}
}

/*ChatGetOK handles this case with default header values.

Request was successful
*/
type ChatGetOK struct {
	Payload []*models.Chat
}

func (o *ChatGetOK) Error() string {
	return fmt.Sprintf("[GET /chat][%d] chatGetOK  %+v", 200, o.Payload)
}

func (o *ChatGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChatGetBadRequest creates a ChatGetBadRequest with default headers values
func NewChatGetBadRequest() *ChatGetBadRequest {
	return &ChatGetBadRequest{}
}

/*ChatGetBadRequest handles this case with default header values.

Parameter Error
*/
type ChatGetBadRequest struct {
	Payload *models.Error
}

func (o *ChatGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /chat][%d] chatGetBadRequest  %+v", 400, *o.Payload)
}

func (o *ChatGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChatGetUnauthorized creates a ChatGetUnauthorized with default headers values
func NewChatGetUnauthorized() *ChatGetUnauthorized {
	return &ChatGetUnauthorized{}
}

/*ChatGetUnauthorized handles this case with default header values.

Unauthorized
*/
type ChatGetUnauthorized struct {
	Payload *models.Error
}

func (o *ChatGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /chat][%d] chatGetUnauthorized  %+v", 401, o.Payload)
}

func (o *ChatGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChatGetNotFound creates a ChatGetNotFound with default headers values
func NewChatGetNotFound() *ChatGetNotFound {
	return &ChatGetNotFound{}
}

/*ChatGetNotFound handles this case with default header values.

Not Found
*/
type ChatGetNotFound struct {
	Payload *models.Error
}

func (o *ChatGetNotFound) Error() string {
	return fmt.Sprintf("[GET /chat][%d] chatGetNotFound  %+v", 404, o.Payload)
}

func (o *ChatGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
