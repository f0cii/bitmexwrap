// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/frankrap/bitmexwrap/bitmex/models"
)

// OrderCancelReader is a Reader for the OrderCancel structure.
type OrderCancelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OrderCancelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewOrderCancelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewOrderCancelBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewOrderCancelUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewOrderCancelNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewOrderCancelOK creates a OrderCancelOK with default headers values
func NewOrderCancelOK() *OrderCancelOK {
	return &OrderCancelOK{}
}

/*OrderCancelOK handles this case with default header values.

Request was successful
*/
type OrderCancelOK struct {
	Payload []*models.Order
}

func (o *OrderCancelOK) Error() string {
	return fmt.Sprintf("[DELETE /order][%d] orderCancelOK  %+v", 200, o.Payload)
}

func (o *OrderCancelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrderCancelBadRequest creates a OrderCancelBadRequest with default headers values
func NewOrderCancelBadRequest() *OrderCancelBadRequest {
	return &OrderCancelBadRequest{}
}

/*OrderCancelBadRequest handles this case with default header values.

Parameter Error
*/
type OrderCancelBadRequest struct {
	Payload *models.Error
}

func (o *OrderCancelBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /order][%d] orderCancelBadRequest  %+v", 400, *o.Payload)
}

func (o *OrderCancelBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrderCancelUnauthorized creates a OrderCancelUnauthorized with default headers values
func NewOrderCancelUnauthorized() *OrderCancelUnauthorized {
	return &OrderCancelUnauthorized{}
}

/*OrderCancelUnauthorized handles this case with default header values.

Unauthorized
*/
type OrderCancelUnauthorized struct {
	Payload *models.Error
}

func (o *OrderCancelUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /order][%d] orderCancelUnauthorized  %+v", 401, o.Payload)
}

func (o *OrderCancelUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrderCancelNotFound creates a OrderCancelNotFound with default headers values
func NewOrderCancelNotFound() *OrderCancelNotFound {
	return &OrderCancelNotFound{}
}

/*OrderCancelNotFound handles this case with default header values.

Not Found
*/
type OrderCancelNotFound struct {
	Payload *models.Error
}

func (o *OrderCancelNotFound) Error() string {
	return fmt.Sprintf("[DELETE /order][%d] orderCancelNotFound  %+v", 404, o.Payload)
}

func (o *OrderCancelNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
