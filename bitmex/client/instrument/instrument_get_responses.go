// Code generated by go-swagger; DO NOT EDIT.

package instrument

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/frankrap/bitmexwrap/bitmex/models"
)

// InstrumentGetReader is a Reader for the InstrumentGet structure.
type InstrumentGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InstrumentGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewInstrumentGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewInstrumentGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewInstrumentGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewInstrumentGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewInstrumentGetOK creates a InstrumentGetOK with default headers values
func NewInstrumentGetOK() *InstrumentGetOK {
	return &InstrumentGetOK{}
}

/*InstrumentGetOK handles this case with default header values.

Request was successful
*/
type InstrumentGetOK struct {
	Payload []*models.Instrument
}

func (o *InstrumentGetOK) Error() string {
	return fmt.Sprintf("[GET /instrument][%d] instrumentGetOK  %+v", 200, o.Payload)
}

func (o *InstrumentGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstrumentGetBadRequest creates a InstrumentGetBadRequest with default headers values
func NewInstrumentGetBadRequest() *InstrumentGetBadRequest {
	return &InstrumentGetBadRequest{}
}

/*InstrumentGetBadRequest handles this case with default header values.

Parameter Error
*/
type InstrumentGetBadRequest struct {
	Payload *models.Error
}

func (o *InstrumentGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /instrument][%d] instrumentGetBadRequest  %+v", 400, *o.Payload)
}

func (o *InstrumentGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstrumentGetUnauthorized creates a InstrumentGetUnauthorized with default headers values
func NewInstrumentGetUnauthorized() *InstrumentGetUnauthorized {
	return &InstrumentGetUnauthorized{}
}

/*InstrumentGetUnauthorized handles this case with default header values.

Unauthorized
*/
type InstrumentGetUnauthorized struct {
	Payload *models.Error
}

func (o *InstrumentGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /instrument][%d] instrumentGetUnauthorized  %+v", 401, o.Payload)
}

func (o *InstrumentGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstrumentGetNotFound creates a InstrumentGetNotFound with default headers values
func NewInstrumentGetNotFound() *InstrumentGetNotFound {
	return &InstrumentGetNotFound{}
}

/*InstrumentGetNotFound handles this case with default header values.

Not Found
*/
type InstrumentGetNotFound struct {
	Payload *models.Error
}

func (o *InstrumentGetNotFound) Error() string {
	return fmt.Sprintf("[GET /instrument][%d] instrumentGetNotFound  %+v", 404, o.Payload)
}

func (o *InstrumentGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
