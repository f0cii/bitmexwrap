// Code generated by go-swagger; DO NOT EDIT.

package api_key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/frankrap/bitmexwrap/bitmex/models"
)

// APIKeyGetReader is a Reader for the APIKeyGet structure.
type APIKeyGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *APIKeyGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAPIKeyGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAPIKeyGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAPIKeyGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAPIKeyGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAPIKeyGetOK creates a APIKeyGetOK with default headers values
func NewAPIKeyGetOK() *APIKeyGetOK {
	return &APIKeyGetOK{}
}

/*APIKeyGetOK handles this case with default header values.

Request was successful
*/
type APIKeyGetOK struct {
	Payload []*models.APIKey
}

func (o *APIKeyGetOK) Error() string {
	return fmt.Sprintf("[GET /apiKey][%d] apiKeyGetOK  %+v", 200, o.Payload)
}

func (o *APIKeyGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAPIKeyGetBadRequest creates a APIKeyGetBadRequest with default headers values
func NewAPIKeyGetBadRequest() *APIKeyGetBadRequest {
	return &APIKeyGetBadRequest{}
}

/*APIKeyGetBadRequest handles this case with default header values.

Parameter Error
*/
type APIKeyGetBadRequest struct {
	Payload *models.Error
}

func (o *APIKeyGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /apiKey][%d] apiKeyGetBadRequest  %+v", 400, *o.Payload)
}

func (o *APIKeyGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAPIKeyGetUnauthorized creates a APIKeyGetUnauthorized with default headers values
func NewAPIKeyGetUnauthorized() *APIKeyGetUnauthorized {
	return &APIKeyGetUnauthorized{}
}

/*APIKeyGetUnauthorized handles this case with default header values.

Unauthorized
*/
type APIKeyGetUnauthorized struct {
	Payload *models.Error
}

func (o *APIKeyGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /apiKey][%d] apiKeyGetUnauthorized  %+v", 401, o.Payload)
}

func (o *APIKeyGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAPIKeyGetNotFound creates a APIKeyGetNotFound with default headers values
func NewAPIKeyGetNotFound() *APIKeyGetNotFound {
	return &APIKeyGetNotFound{}
}

/*APIKeyGetNotFound handles this case with default header values.

Not Found
*/
type APIKeyGetNotFound struct {
	Payload *models.Error
}

func (o *APIKeyGetNotFound) Error() string {
	return fmt.Sprintf("[GET /apiKey][%d] apiKeyGetNotFound  %+v", 404, o.Payload)
}

func (o *APIKeyGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
