// Code generated by go-swagger; DO NOT EDIT.

package funding

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/frankrap/bitmexwrap/bitmex/models"
)

// FundingGetReader is a Reader for the FundingGet structure.
type FundingGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FundingGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewFundingGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewFundingGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewFundingGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewFundingGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewFundingGetOK creates a FundingGetOK with default headers values
func NewFundingGetOK() *FundingGetOK {
	return &FundingGetOK{}
}

/*FundingGetOK handles this case with default header values.

Request was successful
*/
type FundingGetOK struct {
	Payload []*models.Funding
}

func (o *FundingGetOK) Error() string {
	return fmt.Sprintf("[GET /funding][%d] fundingGetOK  %+v", 200, o.Payload)
}

func (o *FundingGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFundingGetBadRequest creates a FundingGetBadRequest with default headers values
func NewFundingGetBadRequest() *FundingGetBadRequest {
	return &FundingGetBadRequest{}
}

/*FundingGetBadRequest handles this case with default header values.

Parameter Error
*/
type FundingGetBadRequest struct {
	Payload *models.Error
}

func (o *FundingGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /funding][%d] fundingGetBadRequest  %+v", 400, *o.Payload)
}

func (o *FundingGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFundingGetUnauthorized creates a FundingGetUnauthorized with default headers values
func NewFundingGetUnauthorized() *FundingGetUnauthorized {
	return &FundingGetUnauthorized{}
}

/*FundingGetUnauthorized handles this case with default header values.

Unauthorized
*/
type FundingGetUnauthorized struct {
	Payload *models.Error
}

func (o *FundingGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /funding][%d] fundingGetUnauthorized  %+v", 401, o.Payload)
}

func (o *FundingGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFundingGetNotFound creates a FundingGetNotFound with default headers values
func NewFundingGetNotFound() *FundingGetNotFound {
	return &FundingGetNotFound{}
}

/*FundingGetNotFound handles this case with default header values.

Not Found
*/
type FundingGetNotFound struct {
	Payload *models.Error
}

func (o *FundingGetNotFound) Error() string {
	return fmt.Sprintf("[GET /funding][%d] fundingGetNotFound  %+v", 404, o.Payload)
}

func (o *FundingGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
