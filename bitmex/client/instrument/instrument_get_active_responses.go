// Code generated by go-swagger; DO NOT EDIT.

package instrument

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/frankrap/bitmexwrap/bitmex/models"
)

// InstrumentGetActiveReader is a Reader for the InstrumentGetActive structure.
type InstrumentGetActiveReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InstrumentGetActiveReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewInstrumentGetActiveOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewInstrumentGetActiveBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewInstrumentGetActiveUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewInstrumentGetActiveNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewInstrumentGetActiveOK creates a InstrumentGetActiveOK with default headers values
func NewInstrumentGetActiveOK() *InstrumentGetActiveOK {
	return &InstrumentGetActiveOK{}
}

/*InstrumentGetActiveOK handles this case with default header values.

Request was successful
*/
type InstrumentGetActiveOK struct {
	Payload []*models.Instrument
}

func (o *InstrumentGetActiveOK) Error() string {
	return fmt.Sprintf("[GET /instrument/active][%d] instrumentGetActiveOK  %+v", 200, o.Payload)
}

func (o *InstrumentGetActiveOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstrumentGetActiveBadRequest creates a InstrumentGetActiveBadRequest with default headers values
func NewInstrumentGetActiveBadRequest() *InstrumentGetActiveBadRequest {
	return &InstrumentGetActiveBadRequest{}
}

/*InstrumentGetActiveBadRequest handles this case with default header values.

Parameter Error
*/
type InstrumentGetActiveBadRequest struct {
	Payload *models.Error
}

func (o *InstrumentGetActiveBadRequest) Error() string {
	return fmt.Sprintf("[GET /instrument/active][%d] instrumentGetActiveBadRequest  %+v", 400, *o.Payload)
}

func (o *InstrumentGetActiveBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstrumentGetActiveUnauthorized creates a InstrumentGetActiveUnauthorized with default headers values
func NewInstrumentGetActiveUnauthorized() *InstrumentGetActiveUnauthorized {
	return &InstrumentGetActiveUnauthorized{}
}

/*InstrumentGetActiveUnauthorized handles this case with default header values.

Unauthorized
*/
type InstrumentGetActiveUnauthorized struct {
	Payload *models.Error
}

func (o *InstrumentGetActiveUnauthorized) Error() string {
	return fmt.Sprintf("[GET /instrument/active][%d] instrumentGetActiveUnauthorized  %+v", 401, o.Payload)
}

func (o *InstrumentGetActiveUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstrumentGetActiveNotFound creates a InstrumentGetActiveNotFound with default headers values
func NewInstrumentGetActiveNotFound() *InstrumentGetActiveNotFound {
	return &InstrumentGetActiveNotFound{}
}

/*InstrumentGetActiveNotFound handles this case with default header values.

Not Found
*/
type InstrumentGetActiveNotFound struct {
	Payload *models.Error
}

func (o *InstrumentGetActiveNotFound) Error() string {
	return fmt.Sprintf("[GET /instrument/active][%d] instrumentGetActiveNotFound  %+v", 404, o.Payload)
}

func (o *InstrumentGetActiveNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
