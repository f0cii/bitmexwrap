// Code generated by go-swagger; DO NOT EDIT.

package settlement

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/frankrap/bitmexwrap/bitmex/models"
)

// SettlementGetReader is a Reader for the SettlementGet structure.
type SettlementGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SettlementGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSettlementGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSettlementGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSettlementGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSettlementGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSettlementGetOK creates a SettlementGetOK with default headers values
func NewSettlementGetOK() *SettlementGetOK {
	return &SettlementGetOK{}
}

/*SettlementGetOK handles this case with default header values.

Request was successful
*/
type SettlementGetOK struct {
	Payload []*models.Settlement
}

func (o *SettlementGetOK) Error() string {
	return fmt.Sprintf("[GET /settlement][%d] settlementGetOK  %+v", 200, o.Payload)
}

func (o *SettlementGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSettlementGetBadRequest creates a SettlementGetBadRequest with default headers values
func NewSettlementGetBadRequest() *SettlementGetBadRequest {
	return &SettlementGetBadRequest{}
}

/*SettlementGetBadRequest handles this case with default header values.

Parameter Error
*/
type SettlementGetBadRequest struct {
	Payload *models.Error
}

func (o *SettlementGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /settlement][%d] settlementGetBadRequest  %+v", 400, *o.Payload)
}

func (o *SettlementGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSettlementGetUnauthorized creates a SettlementGetUnauthorized with default headers values
func NewSettlementGetUnauthorized() *SettlementGetUnauthorized {
	return &SettlementGetUnauthorized{}
}

/*SettlementGetUnauthorized handles this case with default header values.

Unauthorized
*/
type SettlementGetUnauthorized struct {
	Payload *models.Error
}

func (o *SettlementGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /settlement][%d] settlementGetUnauthorized  %+v", 401, o.Payload)
}

func (o *SettlementGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSettlementGetNotFound creates a SettlementGetNotFound with default headers values
func NewSettlementGetNotFound() *SettlementGetNotFound {
	return &SettlementGetNotFound{}
}

/*SettlementGetNotFound handles this case with default header values.

Not Found
*/
type SettlementGetNotFound struct {
	Payload *models.Error
}

func (o *SettlementGetNotFound) Error() string {
	return fmt.Sprintf("[GET /settlement][%d] settlementGetNotFound  %+v", 404, o.Payload)
}

func (o *SettlementGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
