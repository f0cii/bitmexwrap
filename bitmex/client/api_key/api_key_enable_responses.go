// Code generated by go-swagger; DO NOT EDIT.

package api_key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/frankrap/bitmexwrap/bitmex/models"
)

// APIKeyEnableReader is a Reader for the APIKeyEnable structure.
type APIKeyEnableReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *APIKeyEnableReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAPIKeyEnableOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAPIKeyEnableBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAPIKeyEnableUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAPIKeyEnableNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAPIKeyEnableOK creates a APIKeyEnableOK with default headers values
func NewAPIKeyEnableOK() *APIKeyEnableOK {
	return &APIKeyEnableOK{}
}

/*APIKeyEnableOK handles this case with default header values.

Request was successful
*/
type APIKeyEnableOK struct {
	Payload *models.APIKey
}

func (o *APIKeyEnableOK) Error() string {
	return fmt.Sprintf("[POST /apiKey/enable][%d] apiKeyEnableOK  %+v", 200, *o.Payload)
}

func (o *APIKeyEnableOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIKey)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAPIKeyEnableBadRequest creates a APIKeyEnableBadRequest with default headers values
func NewAPIKeyEnableBadRequest() *APIKeyEnableBadRequest {
	return &APIKeyEnableBadRequest{}
}

/*APIKeyEnableBadRequest handles this case with default header values.

Parameter Error
*/
type APIKeyEnableBadRequest struct {
	Payload *models.Error
}

func (o *APIKeyEnableBadRequest) Error() string {
	return fmt.Sprintf("[POST /apiKey/enable][%d] apiKeyEnableBadRequest  %+v", 400, *o.Payload)
}

func (o *APIKeyEnableBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAPIKeyEnableUnauthorized creates a APIKeyEnableUnauthorized with default headers values
func NewAPIKeyEnableUnauthorized() *APIKeyEnableUnauthorized {
	return &APIKeyEnableUnauthorized{}
}

/*APIKeyEnableUnauthorized handles this case with default header values.

Unauthorized
*/
type APIKeyEnableUnauthorized struct {
	Payload *models.Error
}

func (o *APIKeyEnableUnauthorized) Error() string {
	return fmt.Sprintf("[POST /apiKey/enable][%d] apiKeyEnableUnauthorized  %+v", 401, o.Payload)
}

func (o *APIKeyEnableUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAPIKeyEnableNotFound creates a APIKeyEnableNotFound with default headers values
func NewAPIKeyEnableNotFound() *APIKeyEnableNotFound {
	return &APIKeyEnableNotFound{}
}

/*APIKeyEnableNotFound handles this case with default header values.

Not Found
*/
type APIKeyEnableNotFound struct {
	Payload *models.Error
}

func (o *APIKeyEnableNotFound) Error() string {
	return fmt.Sprintf("[POST /apiKey/enable][%d] apiKeyEnableNotFound  %+v", 404, o.Payload)
}

func (o *APIKeyEnableNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
