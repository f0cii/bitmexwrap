// Code generated by go-swagger; DO NOT EDIT.

package position

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/frankrap/bitmexwrap/bitmex/models"
)

// PositionUpdateRiskLimitReader is a Reader for the PositionUpdateRiskLimit structure.
type PositionUpdateRiskLimitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PositionUpdateRiskLimitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPositionUpdateRiskLimitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPositionUpdateRiskLimitBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPositionUpdateRiskLimitUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPositionUpdateRiskLimitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPositionUpdateRiskLimitOK creates a PositionUpdateRiskLimitOK with default headers values
func NewPositionUpdateRiskLimitOK() *PositionUpdateRiskLimitOK {
	return &PositionUpdateRiskLimitOK{}
}

/*PositionUpdateRiskLimitOK handles this case with default header values.

Request was successful
*/
type PositionUpdateRiskLimitOK struct {
	Payload *models.Position
}

func (o *PositionUpdateRiskLimitOK) Error() string {
	return fmt.Sprintf("[POST /position/riskLimit][%d] positionUpdateRiskLimitOK  %+v", 200, *o.Payload)
}

func (o *PositionUpdateRiskLimitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Position)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPositionUpdateRiskLimitBadRequest creates a PositionUpdateRiskLimitBadRequest with default headers values
func NewPositionUpdateRiskLimitBadRequest() *PositionUpdateRiskLimitBadRequest {
	return &PositionUpdateRiskLimitBadRequest{}
}

/*PositionUpdateRiskLimitBadRequest handles this case with default header values.

Parameter Error
*/
type PositionUpdateRiskLimitBadRequest struct {
	Payload *models.Error
}

func (o *PositionUpdateRiskLimitBadRequest) Error() string {
	return fmt.Sprintf("[POST /position/riskLimit][%d] positionUpdateRiskLimitBadRequest  %+v", 400, *o.Payload)
}

func (o *PositionUpdateRiskLimitBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPositionUpdateRiskLimitUnauthorized creates a PositionUpdateRiskLimitUnauthorized with default headers values
func NewPositionUpdateRiskLimitUnauthorized() *PositionUpdateRiskLimitUnauthorized {
	return &PositionUpdateRiskLimitUnauthorized{}
}

/*PositionUpdateRiskLimitUnauthorized handles this case with default header values.

Unauthorized
*/
type PositionUpdateRiskLimitUnauthorized struct {
	Payload *models.Error
}

func (o *PositionUpdateRiskLimitUnauthorized) Error() string {
	return fmt.Sprintf("[POST /position/riskLimit][%d] positionUpdateRiskLimitUnauthorized  %+v", 401, o.Payload)
}

func (o *PositionUpdateRiskLimitUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPositionUpdateRiskLimitNotFound creates a PositionUpdateRiskLimitNotFound with default headers values
func NewPositionUpdateRiskLimitNotFound() *PositionUpdateRiskLimitNotFound {
	return &PositionUpdateRiskLimitNotFound{}
}

/*PositionUpdateRiskLimitNotFound handles this case with default header values.

Not Found
*/
type PositionUpdateRiskLimitNotFound struct {
	Payload *models.Error
}

func (o *PositionUpdateRiskLimitNotFound) Error() string {
	return fmt.Sprintf("[POST /position/riskLimit][%d] positionUpdateRiskLimitNotFound  %+v", 404, o.Payload)
}

func (o *PositionUpdateRiskLimitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
