// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/frankrap/bitmexwrap/bitmex/models"
)

// OrderGetOrdersReader is a Reader for the OrderGetOrders structure.
type OrderGetOrdersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OrderGetOrdersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewOrderGetOrdersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewOrderGetOrdersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewOrderGetOrdersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewOrderGetOrdersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewOrderGetOrdersOK creates a OrderGetOrdersOK with default headers values
func NewOrderGetOrdersOK() *OrderGetOrdersOK {
	return &OrderGetOrdersOK{}
}

/*OrderGetOrdersOK handles this case with default header values.

Request was successful
*/
type OrderGetOrdersOK struct {
	Payload []*models.Order
}

func (o *OrderGetOrdersOK) Error() string {
	return fmt.Sprintf("[GET /order][%d] orderGetOrdersOK  %+v", 200, o.Payload)
}

func (o *OrderGetOrdersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrderGetOrdersBadRequest creates a OrderGetOrdersBadRequest with default headers values
func NewOrderGetOrdersBadRequest() *OrderGetOrdersBadRequest {
	return &OrderGetOrdersBadRequest{}
}

/*OrderGetOrdersBadRequest handles this case with default header values.

Parameter Error
*/
type OrderGetOrdersBadRequest struct {
	Payload *models.Error
}

func (o *OrderGetOrdersBadRequest) Error() string {
	return fmt.Sprintf("[GET /order][%d] orderGetOrdersBadRequest  %+v", 400, *o.Payload)
}

func (o *OrderGetOrdersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrderGetOrdersUnauthorized creates a OrderGetOrdersUnauthorized with default headers values
func NewOrderGetOrdersUnauthorized() *OrderGetOrdersUnauthorized {
	return &OrderGetOrdersUnauthorized{}
}

/*OrderGetOrdersUnauthorized handles this case with default header values.

Unauthorized
*/
type OrderGetOrdersUnauthorized struct {
	Payload *models.Error
}

func (o *OrderGetOrdersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /order][%d] orderGetOrdersUnauthorized  %+v", 401, o.Payload)
}

func (o *OrderGetOrdersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrderGetOrdersNotFound creates a OrderGetOrdersNotFound with default headers values
func NewOrderGetOrdersNotFound() *OrderGetOrdersNotFound {
	return &OrderGetOrdersNotFound{}
}

/*OrderGetOrdersNotFound handles this case with default header values.

Not Found
*/
type OrderGetOrdersNotFound struct {
	Payload *models.Error
}

func (o *OrderGetOrdersNotFound) Error() string {
	return fmt.Sprintf("[GET /order][%d] orderGetOrdersNotFound  %+v", 404, o.Payload)
}

func (o *OrderGetOrdersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
