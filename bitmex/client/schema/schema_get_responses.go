// Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/frankrap/bitmexwrap/bitmex/models"
)

// SchemaGetReader is a Reader for the SchemaGet structure.
type SchemaGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SchemaGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSchemaGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSchemaGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSchemaGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSchemaGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSchemaGetOK creates a SchemaGetOK with default headers values
func NewSchemaGetOK() *SchemaGetOK {
	return &SchemaGetOK{}
}

/*SchemaGetOK handles this case with default header values.

Request was successful
*/
type SchemaGetOK struct {
	Payload interface{}
}

func (o *SchemaGetOK) Error() string {
	return fmt.Sprintf("[GET /schema][%d] schemaGetOK  %+v", 200, o.Payload)
}

func (o *SchemaGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSchemaGetBadRequest creates a SchemaGetBadRequest with default headers values
func NewSchemaGetBadRequest() *SchemaGetBadRequest {
	return &SchemaGetBadRequest{}
}

/*SchemaGetBadRequest handles this case with default header values.

Parameter Error
*/
type SchemaGetBadRequest struct {
	Payload *models.Error
}

func (o *SchemaGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /schema][%d] schemaGetBadRequest  %+v", 400, *o.Payload)
}

func (o *SchemaGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSchemaGetUnauthorized creates a SchemaGetUnauthorized with default headers values
func NewSchemaGetUnauthorized() *SchemaGetUnauthorized {
	return &SchemaGetUnauthorized{}
}

/*SchemaGetUnauthorized handles this case with default header values.

Unauthorized
*/
type SchemaGetUnauthorized struct {
	Payload *models.Error
}

func (o *SchemaGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /schema][%d] schemaGetUnauthorized  %+v", 401, o.Payload)
}

func (o *SchemaGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSchemaGetNotFound creates a SchemaGetNotFound with default headers values
func NewSchemaGetNotFound() *SchemaGetNotFound {
	return &SchemaGetNotFound{}
}

/*SchemaGetNotFound handles this case with default header values.

Not Found
*/
type SchemaGetNotFound struct {
	Payload *models.Error
}

func (o *SchemaGetNotFound) Error() string {
	return fmt.Sprintf("[GET /schema][%d] schemaGetNotFound  %+v", 404, o.Payload)
}

func (o *SchemaGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
